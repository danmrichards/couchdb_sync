<?php

/**
 * @file
 * Tests for the CouchDB Sync module.
 */

/**
 * Defines a base class for testing the CouchDB Sync module.
 */
class CouchDBSyncTestCase extends DrupalWebTestCase {

  // TODO: Refactor tests to work for all enabled entity types, not just nodes.

  // TODO: Add unit tests to ensure that entities not ready for push (e.g. a
  // node that is unpublished) do not get sent to CouchDB.

  // TODO: Add unit tests to plugin API: valid plugin, invalid plugin.

  // TODO: Add unit tests for all core field type plugins.

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'CouchDB Sync Unit Tests',
      'description' => 'Tests the CouchDB Sync module.',
      'group' => 'CouchDB',
    );
  }

  /**
   * Initialise the CouchDB connection details.
   */
  private function init() {
    include DRUPAL_ROOT . '/' . conf_path() . '/settings.php';

    // Setup connection variables.
    $settings = array(
      'base_url' => (isset($conf['couchdb']['base_url'])) ? $conf['couchdb']['base_url'] : '',
      'http_auth' => (isset($conf['couchdb']['http_auth'])) ? $conf['couchdb']['http_auth'] : '',
      'cookie_jar' => (isset($conf['couchdb']['cookie_jar'])) ? $conf['couchdb']['cookie_jar'] : '',
    );

    variable_set('couchdb', $settings);

    // Set an override database name.
    variable_set('couchdb_sync_database_name', 'couchdb_sync_simpletest_db');
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Check the CouchDB connection is working.
    try {
      // Setup variables.
      $this->init();

      // Make sure CouchDB Sync is enabled.
      $modules_enabled = module_enable(array('couchdb_sync'), TRUE);
      $this->assertTrue($modules_enabled, t('Enabled CouchDB Sync'));

      // Try the connection.
      $couch = new CouchDB();

      // Create a test content type for us to use.
      $this->drupalCreateContentType(array('type' => 'couchdb_sync_test_content', 'name' => 'CouchDB Sync Test Content'));

      // We're done!
      $this->setup = TRUE;
    }
    catch (CouchDBException $e) {
      // Throw error.
      $this->error($e->getMessage());
    }
  }

  /**
   * Test the database for the current site exists in CouchDB.
   */
  public function testSiteDatabaseExists() {
    // Setup variables.
    $this->init();

    $couch = new CouchDB();

    // Get the db name.
    $db_name = couchdb_sync_get_database_name();

    // Get the database info.
    $result = $couch->databaseInfo($db_name);

    // Check the database exists.
    $this->assertEqual($result->db_name, $db_name, 'Site database exists in CouchDB');
  }

  /**
   * Test a node is correctly inserted into CouchDB.
   */
  public function testCouchDbSyncDocumentInsert() {
    // Setup variables.
    $this->init();

    // Settings for the test node.
    $settings = array(
      'type' => 'couchdb_sync_test_content',
      'body' => array(LANGUAGE_NONE => array(array('value' => 'This is a CouchDB document'))),
    );

    // Create a test node.
    $test_node = $this->drupalCreateNode($settings);

    // TODO: Add config option to push immediately instead of using queue.
    // Run the system cron.
    drupal_cron_run();

    // Get the document from CouchDB.
    $couchdb_node_document = couchdb_sync_get_document_by_id('node_' . $test_node->nid);

    // Check the document ID matches.
    $this->assertEqual($couchdb_node_document->id, $test_node->nid, 'Document with matching ID exists in CouchDB');

    // Check the document body contains the expected string.
    $this->drupalSetContent($couchdb_node_document->body);
    $this->assertPattern('|This is a CouchDB document|', 'CouchDB document contains expected string in body.');

    // Check the revision token matches.
    $this->assertEqual($couchdb_node_document->_rev, couchdb_sync_get_entity_couchdb_rev('node', $test_node->nid), 'Local and CouchDB revision tokens match.');
  }

  /**
   * Test a node is correctly inserted into CouchDB.
   */
  public function testCouchDbSyncDocumentUpdate() {
    // Setup variables.
    $this->init();

    // Settings for the test node.
    $settings = array(
      'type' => 'couchdb_sync_test_content',
      'title' => 'This is a CouchDB document',
    );

    // Create a test node.
    $test_node = $this->drupalCreateNode($settings);

    // TODO: Add config option to push immediately instead of using queue.
    // Run the system cron.
    drupal_cron_run();

    // Get the document from CouchDB.
    $couchdb_node_document = couchdb_sync_get_document_by_id('node_' . $test_node->nid);

    // Check the document ID matches.
    $this->assertEqual($couchdb_node_document->id, $test_node->nid, 'Document with matching ID exists in CouchDB');

    // Check the document body contains the expected string.
    $this->assertEqual($couchdb_node_document->title, 'This is a CouchDB document', 'CouchDB document has expected title value.');

    // Check the revision token matches.
    $this->assertEqual($couchdb_node_document->_rev, couchdb_sync_get_entity_couchdb_rev('node', $test_node->nid), 'Local and CouchDB revision tokens match.');

    // Generate a new node title.
    $new_title = $this->randomName(10);

    // Update the node.
    $updated_node = (object) array(
      'nid' => $test_node->nid,
      'vid' => $test_node->vid,
      'uid' => $test_node->uid,
      'type' => $test_node->type,
      'status' => $test_node->status,
      'title' => $new_title,
      'log' => '',
    );

    // Save the node.
    node_save($updated_node);

    // TODO: Add config option to push immediately instead of using queue.
    // Run the system cron.
    drupal_cron_run();

    // Get the document from CouchDB.
    $couchdb_updated_node_document = couchdb_sync_get_document_by_id('node_' . $test_node->nid);

    // Check the document ID matches.
    $this->assertEqual($couchdb_updated_node_document->id, $updated_node->nid, 'Updated document with matching ID exists in CouchDB');

    // Check the document body contains the expected string.
    $this->assertEqual($couchdb_updated_node_document->title, $new_title, 'CouchDB document has expected updated title value.');

    // Check the revision token matches.
    $this->assertEqual($couchdb_updated_node_document->_rev, couchdb_sync_get_entity_couchdb_rev('node', $updated_node->nid), 'Local and CouchDB revision tokens match.');
  }

  /**
   * Test a node is correctly inserted into CouchDB.
   */
  public function testCouchDbSyncDocumentDelete() {
    // Setup variables.
    $this->init();

    // Settings for the test node.
    $settings = array(
      'type' => 'couchdb_sync_test_content',
      'title' => 'This is a CouchDB document',
    );

    // Create a test node.
    $test_node = $this->drupalCreateNode($settings);

    // TODO: Add config option to push immediately instead of using queue.
    // Run the system cron.
    drupal_cron_run();

    // Get the document from CouchDB.
    $couchdb_node_document = couchdb_sync_get_document_by_id('node_' . $test_node->nid);

    // Check the document ID matches.
    $this->assertEqual($couchdb_node_document->id, $test_node->nid, 'Document with matching ID exists in CouchDB');

    // Check the revision token matches.
    $this->assertEqual($couchdb_node_document->_rev, couchdb_sync_get_entity_couchdb_rev('node', $test_node->nid), 'Local and CouchDB revision tokens match.');

    // Delete the node.
    node_delete($test_node->nid);

    // TODO: Add config option to push immediately instead of using queue.
    // Run the system cron.
    drupal_cron_run();

    // Get the deleted document from CouchDB.
    $couchdb_deleted_node_document = couchdb_sync_get_document_by_id('node_' . $test_node->nid);

    // Check the document was deleted.
    $this->assertFalse($couchdb_deleted_node_document, 'Document was marked as deleted in CouchDB');
  }

  /**
   * {@inheritdoc}
   */
  protected function tearDown() {
    // Setup variables.
    $this->init();

    // Delete the test database.
    $couch = new CouchDB();
    $couch->deleteDatabase(couchdb_sync_get_database_name());

    parent::tearDown();
  }

}
