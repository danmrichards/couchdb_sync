<?php

/**
 * @file
 * Contains CouchDBSyncCrudTest.
 */

/**
 * Defines a test class for testing the CouchDB Sync CRUD actions.
 */
class CouchDBSyncCrudTest extends CouchDBSyncBase {

  // TODO: Refactor tests to work for all enabled entity types, not just nodes.

  // TODO: Add unit tests to ensure that entities not ready for push (e.g. a
  // node that is unpublished) do not get sent to CouchDB.

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'CRUD tests',
      'description' => 'Tests CRUD integration with CouchDB.',
      'group' => 'CouchDB Sync',
    );
  }

  /**
   * Test the database for the current site exists in CouchDB.
   */
  public function testSiteDatabaseExists() {
    // Setup variables.
    $this->init();

    $couch = new CouchDB();

    // Get the db name.
    $db_name = couchdb_sync_get_database_name();

    // Get the database info.
    $result = $couch->databaseInfo($db_name);

    // Check the database exists.
    $this->assertEqual($result->db_name, $db_name, t('Site database exists in CouchDB'));
  }

  /**
   * Test a node is correctly inserted into CouchDB.
   */
  public function testCouchDbSyncDocumentInsert() {
    // Setup variables.
    $this->init();

    // Settings for the test node.
    $settings = array(
      'type' => 'couchdb_sync_test_content',
      'body' => array(LANGUAGE_NONE => array(array('value' => 'This is a CouchDB document'))),
    );

    // Create a test node.
    $test_node = $this->drupalCreateNode($settings);

    // TODO: Implement new ctools plugin, processor, to handle how entities are
    // pushed. 2 defaults: cron queue or immediately.
    // Run the system cron.
    drupal_cron_run();

    // Get the document from CouchDB.
    $couchdb_node_document = couchdb_sync_get_document_by_id('node_' . $test_node->nid);

    // Check the document ID matches.
    $this->assertEqual($couchdb_node_document->id, $test_node->nid, t('Document with matching ID exists in CouchDB'));

    // Check the document body contains the expected string.
    $this->drupalSetContent(is_object($couchdb_node_document->body) ? $couchdb_node_document->body->value : $couchdb_node_document->body);
    $this->assertPattern('|This is a CouchDB document|', t('CouchDB document contains expected string in body.'));

    // Check the revision token matches.
    $this->assertEqual($couchdb_node_document->_rev, couchdb_sync_get_entity_couchdb_rev('node', $test_node->nid), t('Local and CouchDB revision tokens match.'));
  }

  /**
   * Test a node is correctly inserted into CouchDB.
   */
  public function testCouchDbSyncDocumentUpdate() {
    // Setup variables.
    $this->init();

    // Settings for the test node.
    $settings = array(
      'type' => 'couchdb_sync_test_content',
      'title' => 'This is a CouchDB document',
    );

    // Create a test node.
    $test_node = $this->drupalCreateNode($settings);

    // TODO: Implement new ctools plugin, processor, to handle how entities are
    // pushed. 2 defaults: cron queue or immediately.
    // Run the system cron.
    drupal_cron_run();

    // Get the document from CouchDB.
    $couchdb_node_document = couchdb_sync_get_document_by_id('node_' . $test_node->nid);

    // Check the document ID matches.
    $this->assertEqual($couchdb_node_document->id, $test_node->nid, t('Document with matching ID exists in CouchDB'));

    // Check the document body contains the expected string.
    $this->assertEqual($couchdb_node_document->title, 'This is a CouchDB document', t('CouchDB document has expected title value.'));

    // Check the revision token matches.
    $this->assertEqual($couchdb_node_document->_rev, couchdb_sync_get_entity_couchdb_rev('node', $test_node->nid), t('Local and CouchDB revision tokens match.'));

    // Generate a new node title.
    $new_title = $this->randomName(10);

    // Update the node.
    $updated_node = (object) array(
      'nid' => $test_node->nid,
      'vid' => $test_node->vid,
      'uid' => $test_node->uid,
      'type' => $test_node->type,
      'status' => $test_node->status,
      'title' => $new_title,
      'log' => '',
    );

    // Save the node.
    node_save($updated_node);

    // TODO: Implement new ctools plugin, processor, to handle how entities are
    // pushed. 2 defaults: cron queue or immediately.
    // Run the system cron.
    drupal_cron_run();

    // Get the document from CouchDB.
    $couchdb_updated_node_document = couchdb_sync_get_document_by_id('node_' . $test_node->nid);

    // Check the document ID matches.
    $this->assertEqual($couchdb_updated_node_document->id, $updated_node->nid, t('Updated document with matching ID exists in CouchDB'));

    // Check the document body contains the expected string.
    $this->assertEqual($couchdb_updated_node_document->title, $new_title, t('CouchDB document has expected updated title value.'));

    // Check the revision token matches.
    $this->assertEqual($couchdb_updated_node_document->_rev, couchdb_sync_get_entity_couchdb_rev('node', $updated_node->nid), t('Local and CouchDB revision tokens match.'));
  }

  /**
   * Test a node is correctly inserted into CouchDB.
   */
  public function testCouchDbSyncDocumentDelete() {
    // Setup variables.
    $this->init();

    // Settings for the test node.
    $settings = array(
      'type' => 'couchdb_sync_test_content',
      'title' => 'This is a CouchDB document',
    );

    // Create a test node.
    $test_node = $this->drupalCreateNode($settings);

    // TODO: Implement new ctools plugin, processor, to handle how entities are
    // pushed. 2 defaults: cron queue or immediately.
    // Run the system cron.
    drupal_cron_run();

    // Get the document from CouchDB.
    $couchdb_node_document = couchdb_sync_get_document_by_id('node_' . $test_node->nid);

    // Check the document ID matches.
    $this->assertEqual($couchdb_node_document->id, $test_node->nid, t('Document with matching ID exists in CouchDB'));

    // Check the revision token matches.
    $this->assertEqual($couchdb_node_document->_rev, couchdb_sync_get_entity_couchdb_rev('node', $test_node->nid), t('Local and CouchDB revision tokens match.'));

    // Delete the node.
    node_delete($test_node->nid);

    // TODO: Implement new ctools plugin, processor, to handle how entities are
    // pushed. 2 defaults: cron queue or immediately.
    // Run the system cron.
    drupal_cron_run();

    // Get the deleted document from CouchDB.
    $couchdb_deleted_node_document = couchdb_sync_get_document_by_id('node_' . $test_node->nid);

    // Check the document was deleted.
    $this->assertFalse($couchdb_deleted_node_document, t('Document was marked as deleted in CouchDB'));
  }

}
