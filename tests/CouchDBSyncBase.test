<?php

/**
 * @file
 * Contains CouchDBSyncBase.
 */

/**
 * Defines a base class for testing the CouchDB Sync module.
 */
abstract class CouchDBSyncBase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  protected $profile = 'standard';

  /**
   * Settings for our test content type.
   *
   * @var array
   */
  protected $testContentType = array(
    'machine_name' => 'couchdb_sync_test_content',
    'name' => 'CouchDB Sync Test Content',
  );

  /**
   * The path to an example file.
   *
   * @var string
   */
  protected $exampleFilePath;

  /**
   * The path to an example image.
   *
   * @var string
   */
  protected $exampleImagePath;

  /**
   * Initialise the CouchDB connection details.
   */
  protected function init() {
    include DRUPAL_ROOT . '/' . conf_path() . '/settings.php';

    // Setup connection variables.
    $settings = array(
      'base_url' => (isset($conf['couchdb']['base_url'])) ? $conf['couchdb']['base_url'] : '',
      'http_auth' => (isset($conf['couchdb']['http_auth'])) ? $conf['couchdb']['http_auth'] : '',
      'cookie_jar' => (isset($conf['couchdb']['cookie_jar'])) ? $conf['couchdb']['cookie_jar'] : '',
    );

    variable_set('couchdb', $settings);

    // Set an override database name.
    variable_set('couchdb_sync_database_name', 'couchdb_sync_simpletest_db');

    // Set the example file an image paths.
    $this->exampleFilePath = drupal_get_path('module', 'couchdb_sync_example') . '/example_file.txt';
    $this->exampleImagePath = drupal_get_path('module', 'couchdb_sync_example') . '/example_image.png';
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Check the CouchDB connection is working.
    try {
      // Setup variables.
      $this->init();

      // Make sure CouchDB Sync is enabled.
      $modules_enabled = module_enable(array('couchdb_sync', 'couchdb_sync_example'), TRUE);
      $this->assertTrue($modules_enabled, t('Enabled CouchDB Sync'));

      // Reset/rebuild all data structures after enabling the modules. For
      // some reason we need to do this twice to get the plugins to register.
      $this->resetAll();
      $this->resetAll();

      // Try the connection.
      $couch = new CouchDB();

      // Create a test content type for us to use.
      $this->drupalCreateContentType(array('type' => $this->testContentType['machine_name'], 'name' => $this->testContentType['name']));
      $this->createAttachFields('node', $this->testContentType['machine_name']);

      // We're done!
      $this->setup = TRUE;
    }
    catch (CouchDBException $e) {
      // Throw error.
      $this->error($e->getMessage());
    }
  }

  /**
   * Create fields and attach instances to the entity type.
   *
   * @param string $entity_type
   *   The name of the entity type to attach the field to.
   * @param string $bundle
   *   The name of the entity bundle to attach the field to.
   */
  protected function createAttachFields($entity_type, $bundle) {
    // Create the fields.
    foreach ($this->getExampleFieldBases() as $field_name => $field) {
      field_create_field($field);
    }

    // Create the field instances.
    foreach ($this->getExampleFieldInstances($entity_type, $bundle) as $field_instance_name => $field_instance) {
      field_create_instance($field_instance);
    }
  }

  /**
   * Get example field bases for testing.
   *
   * @return array
   *   Array of field bases.
   */
  protected function getExampleFieldBases() {
    // Define the field bases.
    $field_bases = array();

    $field_bases['field_boolean'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_boolean',
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'locked' => 0,
      'module' => 'list',
      'settings' => array(
        'allowed_values' => array(
          0 => '',
          1 => '',
        ),
        'allowed_values_function' => '',
      ),
      'translatable' => 0,
      'type' => 'list_boolean',
    );

    $field_bases['field_decimal'] = array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_decimal',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(
        'decimal_separator' => '.',
        'precision' => 10,
        'scale' => 2,
      ),
      'translatable' => 0,
      'type' => 'number_decimal',
    );

    $field_bases['field_file'] = array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_file',
      'indexes' => array(
        'fid' => array(
          0 => 'fid',
        ),
      ),
      'locked' => 0,
      'module' => 'file',
      'settings' => array(
        'display_default' => 0,
        'display_field' => 0,
        'uri_scheme' => 'public',
      ),
      'translatable' => 0,
      'type' => 'file',
    );

    $field_bases['field_float'] = array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_float',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(
        'decimal_separator' => '.',
      ),
      'translatable' => 0,
      'type' => 'number_float',
    );

    $field_bases['field_integer'] = array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_integer',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    $field_bases['field_list_float'] = array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_list_float',
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'locked' => 0,
      'module' => 'list',
      'settings' => array(
        'allowed_values' => array(
          0 => 'one',
          1 => 'two',
          2 => 'three',
        ),
        'allowed_values_function' => '',
      ),
      'translatable' => 0,
      'type' => 'list_float',
    );

    $field_bases['field_list_integer'] = array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_list_integer',
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'locked' => 0,
      'module' => 'list',
      'settings' => array(
        'allowed_values' => array(
          0 => 'four',
          1 => 'five',
          2 => 'six',
        ),
        'allowed_values_function' => '',
      ),
      'translatable' => 0,
      'type' => 'list_integer',
    );

    $field_bases['field_long_text'] = array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_long_text',
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => 0,
      'module' => 'text',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'text_long',
    );

    $field_bases['field_term_reference'] = array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_term_reference',
      'indexes' => array(
        'tid' => array(
          0 => 'tid',
        ),
      ),
      'locked' => 0,
      'module' => 'taxonomy',
      'settings' => array(
        'allowed_values' => array(
          0 => array(
            'vocabulary' => 'tags',
            'parent' => 0,
          ),
        ),
      ),
      'translatable' => 0,
      'type' => 'taxonomy_term_reference',
    );

    $field_bases['field_text'] = array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_text',
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => 0,
      'module' => 'text',
      'settings' => array(
        'max_length' => 255,
      ),
      'translatable' => 0,
      'type' => 'text',
    );

    return $field_bases;
  }

  /**
   * Get example field instances for testing.
   *
   * @param string $entity_type
   *   The name of the entity type to attach the field to.
   * @param string $bundle
   *   The name of the entity bundle to attach the field to.
   *
   * @return array
   *   Array of field instances.
   */
  protected function getExampleFieldInstances($entity_type, $bundle) {
    // Define the field instances.
    $field_instances = array();

    $field_instances[$entity_type . '-' . $bundle . '-field_boolean'] = array(
      'bundle' => $bundle,
      'default_value' => array(
        0 => array(
          'value' => 0,
        ),
      ),
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'list',
          'settings' => array(),
          'type' => 'list_default',
          'weight' => 1,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_boolean',
      'label' => 'Boolean',
      'required' => 1,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(
          'display_label' => 1,
        ),
        'type' => 'options_onoff',
        'weight' => 2,
      ),
    );

    $field_instances[$entity_type . '-' . $bundle . '-field_decimal'] = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'number',
          'settings' => array(
            'decimal_separator' => '.',
            'prefix_suffix' => TRUE,
            'scale' => 2,
            'thousand_separator' => '',
          ),
          'type' => 'number_decimal',
          'weight' => 2,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_decimal',
      'label' => 'Decimal',
      'required' => 1,
      'settings' => array(
        'max' => '',
        'min' => '',
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'number',
        'settings' => array(),
        'type' => 'number',
        'weight' => 3,
      ),
    );

    $field_instances[$entity_type . '-' . $bundle . '-field_file'] = array(
      'bundle' => $bundle,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'file',
          'settings' => array(),
          'type' => 'file_default',
          'weight' => 3,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_file',
      'label' => 'File',
      'required' => 1,
      'settings' => array(
        'description_field' => 0,
        'file_directory' => '',
        'file_extensions' => 'txt',
        'max_filesize' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'file',
        'settings' => array(
          'progress_indicator' => 'throbber',
        ),
        'type' => 'file_generic',
        'weight' => 4,
      ),
    );

    $field_instances[$entity_type . '-' . $bundle . '-field_float'] = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'number',
          'settings' => array(
            'decimal_separator' => '.',
            'prefix_suffix' => TRUE,
            'scale' => 2,
            'thousand_separator' => '',
          ),
          'type' => 'number_decimal',
          'weight' => 4,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_float',
      'label' => 'Float',
      'required' => 1,
      'settings' => array(
        'max' => '',
        'min' => '',
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'number',
        'settings' => array(),
        'type' => 'number',
        'weight' => 6,
      ),
    );

    $field_instances[$entity_type . '-' . $bundle . '-field_image'] = array(
      'bundle' => $bundle,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'image',
          'settings' => array(
            'image_link' => '',
            'image_style' => '',
          ),
          'type' => 'image',
          'weight' => 11,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_image',
      'label' => 'Image',
      'required' => 0,
      'settings' => array(
        'alt_field' => 0,
        'default_image' => 0,
        'file_directory' => '',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '',
        'max_resolution' => '',
        'min_resolution' => '',
        'title_field' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'image',
        'settings' => array(
          'preview_image_style' => 'thumbnail',
          'progress_indicator' => 'throbber',
        ),
        'type' => 'image_image',
        'weight' => 5,
      ),
    );

    $field_instances[$entity_type . '-' . $bundle . '-field_integer'] = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'number',
          'settings' => array(
            'decimal_separator' => '.',
            'prefix_suffix' => TRUE,
            'scale' => 0,
            'thousand_separator' => '',
          ),
          'type' => 'number_integer',
          'weight' => 5,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_integer',
      'label' => 'Integer',
      'required' => 1,
      'settings' => array(
        'max' => '',
        'min' => '',
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'number',
        'settings' => array(),
        'type' => 'number',
        'weight' => 7,
      ),
    );

    $field_instances[$entity_type . '-' . $bundle . '-field_list_float'] = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'list',
          'settings' => array(),
          'type' => 'list_default',
          'weight' => 6,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_list_float',
      'label' => 'List Float',
      'required' => 1,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_buttons',
        'weight' => 8,
      ),
    );

    $field_instances[$entity_type . '-' . $bundle . '-field_list_integer'] = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'list',
          'settings' => array(),
          'type' => 'list_default',
          'weight' => 7,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_list_integer',
      'label' => 'List Integer',
      'required' => 1,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_buttons',
        'weight' => 9,
      ),
    );

    $field_instances[$entity_type . '-' . $bundle . '-field_long_text'] = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 8,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_long_text',
      'label' => 'Long text',
      'required' => 1,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => 5,
        ),
        'type' => 'text_textarea',
        'weight' => 10,
      ),
    );

    $field_instances[$entity_type . '-' . $bundle . '-field_term_reference'] = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'taxonomy',
          'settings' => array(),
          'type' => 'taxonomy_term_reference_link',
          'weight' => 9,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_term_reference',
      'label' => 'Term reference',
      'required' => 1,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'taxonomy',
        'settings' => array(
          'autocomplete_path' => 'taxonomy/autocomplete',
          'size' => 60,
        ),
        'type' => 'taxonomy_autocomplete',
        'weight' => 11,
      ),
    );

    $field_instances[$entity_type . '-' . $bundle . '-field_text'] = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 10,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => 'field_text',
      'label' => 'Text',
      'required' => 1,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => 60,
        ),
        'type' => 'text_textfield',
        'weight' => 12,
      ),
    );

    return $field_instances;
  }

  /**
   * Settings to create an example node.
   *
   * @return array
   *   Array of node settings and field values.
   *
   * @see drupalCreateNode
   */
  protected function getExampleNodeSettings() {
    // Upload an example file.
    $example_file = new stdClass();
    $example_file->uid = 1;
    $example_file->uri = $this->exampleFilePath;
    $example_file->filemime = file_get_mimetype($this->exampleFilePath);

    // Copy the file to the public directory.
    $example_file = file_copy($example_file, 'public://example_file.txt');

    // Create an example taxonomy term.
    $term = (object) array(
      'name' => 'Tag 1',
      'description' => 'Tag 1',
      // Use the first available text format.
      'format' => db_query_range('SELECT format FROM {filter_format}', 0, 1)->fetchField(),
      'vid' => taxonomy_vocabulary_machine_name_load('tags')->vid,
      'vocabulary_machine_name' => 'tags',
    );
    taxonomy_term_save($term);

    // Upload an example image.
    $example_image = new stdClass();
    $example_image->uid = 1;
    $example_image->uri = $this->exampleImagePath;
    $example_image->filemime = file_get_mimetype($this->exampleImagePath);

    // Copy the file to the public directory.
    $example_image = file_copy($example_image, 'public://example_image.png');

    return array(
      'type' => $this->testContentType['machine_name'],
      'title' => 'This is an example node',
      'body' => array(
        LANGUAGE_NONE => array(
          array(
            'summary' => '',
            'value' => 'This is the example body',
            'safe_summary' => '',
            'safe_value' => 'This is the example body',
          ),
        ),
      ),
      'field_boolean' => array(
        LANGUAGE_NONE => array(
          array('value' => 1),
        ),
      ),
      'field_decimal' => array(
        LANGUAGE_NONE => array(
          array('value' => 1.23),
          array('value' => 2.34),
        ),
      ),
      'field_file' => array(
        LANGUAGE_NONE => array(
          array(
            'fid' => $example_file->fid,
            'filename' => $example_file->filename,
            'filemime' => $example_file->filemime,
            'filesize' => filesize($this->exampleFilePath),
            'description' => '',
            'uid' => 1,
            'uri' => $example_file->uri,
            'status' => 1,
            'display' => 1,
          ),
        ),
      ),
      'field_float' => array(
        LANGUAGE_NONE => array(
          array('value' => 1.11),
          array('value' => 2.22),
        ),
      ),
      'field_integer' => array(
        LANGUAGE_NONE => array(
          array('value' => 4),
          array('value' => 5),
        ),
      ),
      'field_list_float' => array(
        LANGUAGE_NONE => array(
          array('value' => 1),
        ),
      ),
      'field_list_integer' => array(
        LANGUAGE_NONE => array(
          array('value' => 1),
        ),
      ),
      'field_long_text' => array(
        LANGUAGE_NONE => array(
          array('value' => 'The first piece of long text'),
          array('value' => 'The second piece of long text'),
        ),
      ),
      'field_term_reference' => array(
        LANGUAGE_NONE => array(
          array('tid' => $term->tid),
        ),
      ),
      'field_text' => array(
        LANGUAGE_NONE => array(
          array('value' => 'This is some text'),
        ),
      ),
      'field_image' => array(
        LANGUAGE_NONE => array(
          array(
            'fid' => $example_image->fid,
            'filename' => $example_image->filename,
            'filemime' => $example_image->filemime,
            'filesize' => filesize($this->exampleImagePath),
            'uid' => 1,
            'uri' => $example_image->uri,
            'status' => 1,
          ),
        ),
      ),
    );
  }

  /**
   * Expected values for flattened fields.
   *
   * @return array
   *   An array of expected flattened values in the format field_name => value.
   */
  protected function getExpectedFlatFields() {
    // Get info on the example image.
    $image_info = image_get_info('public://' . basename($this->exampleImagePath));

    // Example taxonomy term.
    $taxonomy_term = new stdClass();
    $taxonomy_term->id = 1;
    $taxonomy_term->type = 'taxonomy_term';
    $taxonomy_term->title = 'Tag 1';
    $taxonomy_term->alias = 'taxonomy_term/1';

    return array(
      'title' => 'This is an example node',
      'body' => array(
        'summary' => '',
        'value' => 'This is the example body',
      ),
      'field_boolean' => 1,
      'field_decimal' => array(
        1.23,
        2.34,
      ),
      'field_file' => array(
        array(
          'src' => file_create_url('public://' . basename($this->exampleFilePath)),
          'filemime' => file_get_mimetype($this->exampleFilePath),
          'filesize' => filesize($this->exampleFilePath),
          'description' => '',
        ),
      ),
      'field_float' => array(
        1.11,
        2.22,
      ),
      'field_integer' => array(
        4,
        5,
      ),
      'field_list_float' => array('two'),
      'field_list_integer' => array('five'),
      'field_long_text' => array(
        'The first piece of long text',
        'The second piece of long text',
      ),
      'field_term_reference' => array(
        $taxonomy_term,
      ),
      'field_text' => array('Moo!'),
      'field_image' => array(
        'src' => file_create_url('public://' . basename($this->exampleImagePath)),
        'filemime' => file_get_mimetype($this->exampleImagePath),
        'filesize' => filesize($this->exampleImagePath),
        'width' => $image_info['width'],
        'height' => $image_info['height'],
      ),
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function tearDown() {
    // Setup variables.
    $this->init();

    // Delete the test database.
    $couch = new CouchDB();
    $couch->deleteDatabase(couchdb_sync_get_database_name());

    // Reset the database name.
    variable_del('couchdb_sync_database_name');

    parent::tearDown();
  }

}
